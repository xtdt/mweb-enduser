"use strict";

/* eslint-disable new-cap,no-shadow */
var Instrumentation = require('./grpcClientInstrumentation');
/**
 * @typedef {Object} InterceptorContext
 * @property {zipkin.Tracer} tracer
 * @property {string} remoteServiceName
 */

/**
 * @method
 * @param {Object} grpc
 * @param {InterceptorContext} context
 * @returns {Interceptor}
 */


var interceptor = function interceptor(grpc, _ref) {
  var tracer = _ref.tracer,
      remoteServiceName = _ref.remoteServiceName;
  var instrumentation = new Instrumentation(grpc, {
    tracer: tracer,
    remoteServiceName: remoteServiceName
  });
  /**
   * @typedef {Function} Interceptor
   * @param {Object} options
   * @param {function()} nextCall
   */

  return function (options, nextCall) {
    var method = options.method_definition.path;
    return tracer.scoped(function () {
      return new grpc.InterceptingCall(nextCall(options), {
        /**
           * @param {grpc.Metadata} metadata
           * @param {Object} listener
           * @param {function(metadata: grpc.Metadata, listener: Object)} next
           */
        start: function start(metadata, listener, next) {
          var traceId = instrumentation.start(metadata, method);
          var zipkinMetadata = Instrumentation.setHeaders(metadata, traceId);
          next(zipkinMetadata, {
            /**
               * @param {grpc.Status} status
               * @param {function(status: grpc.Status)} next
               */
            onReceiveStatus: function onReceiveStatus(status, next) {
              instrumentation.onReceiveStatus(traceId, status);
              next(status);
            }
          });
        }
      });
    });
  };
};

module.exports = interceptor;